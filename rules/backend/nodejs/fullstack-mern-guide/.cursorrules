技术栈:

后端: Node.js 与 Express.js
数据库: MongoDB 与 Mongoose ODM
前端: React.js (用于管理面板, 如果需要)
认证: JSON Web Tokens (JWT)
版本控制: Git
部署: Docker (可选)

用户需求的精确性:

严格遵守指定的用户流程和游戏规则。

策略:

在编码前，总结选秀提交过程，并用伪代码概述 API 端点和业务逻辑。

使用伪代码进行战略规划:

每个功能都以详细的伪代码开始。
示例：提供每周计分过程的伪代码，详细说明从比赛结果输入到参赛状态更新的步骤。

代码质量:

确保代码安全、高效，遵循 RESTful API 最佳实践。
实现适当的错误处理和输入验证。

用户流程:

用户浏览可用的池子
每个池子最多提交 3 个请求
完成请求的支付
管理员批准/拒绝请求
批准的请求成为参赛作品

参赛管理:

每个用户每个池子最多可以有 3 个参赛作品
参赛作品编号为 1, 2, 3
每个参赛作品的选秀是分开制作和跟踪的

选秀管理:

用户为每个参赛作品分别进行选秀
选秀可以在截止日期前更新 (比赛开始或选秀当前周的周日下午 1 点)

计分和排名:

比赛结束后对选秀进行计分
赢: 参赛作品进入下一周
输: 参赛作品从池子中淘汰
每个参赛作品在池子排名中单独排名

结果和排名:

用户分别查看每个参赛作品的选秀/得分
池子排名显示所有参赛作品 (每个用户可能有多个)
池子成员可以在计分后查看所有选秀

关键实现点:

每个用户每个池子限制 3 个请求
分别跟踪请求和参赛作品 (编号为 1, 2, 3)
在请求模型中实现支付状态跟踪
仅在管理员批准和支付完成后创建参赛作品
用于管理和批准请求的管理界面
实现状态转换 (请求: 待定 -> 已批准 -> 已创建参赛作品) 