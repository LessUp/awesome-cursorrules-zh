---
description: 状态转换规则
globs: []
alwaysApply: false
---

# 状态转换规则

本规则集定义了全栈 MERN 指南中应用程序数据或实体状态转换的规范和最佳实践，确保状态流转的逻辑正确性和数据一致性。

## 1. 明确的状态定义

- **枚举所有可能状态**: 对于任何具有生命周期的实体（如订单、任务、用户状态），必须明确定义其所有可能的离散状态。
- **状态图/流程图**: 使用状态图或流程图清晰地可视化状态之间的转换路径。

## 2. 合法的状态转换

- **定义合法路径**: 严格定义从一个状态到另一个状态的所有合法转换路径。禁止非法或意外的状态跳跃。
- **条件约束**: 每次状态转换都应伴随特定的条件检查。例如，只有当订单已支付时，才能从“待支付”转换为“已支付”。
- **权限检查**: 确保只有具备相应权限的用户或系统才能触发特定的状态转换。

## 3. 幂等性与原子性

- **幂等操作**: 状态转换操作应设计为幂等的，即多次执行相同操作应产生相同的结果，不会引入副作用。
- **原子性**: 确保状态转换是一个原子操作，即要么完全成功，要么完全失败，不会出现中间状态。

## 4. 事件驱动与日志记录

- **事件触发**: 状态转换可以由外部事件（如用户操作、支付回调）或内部事件（如定时任务）触发。
- **日志记录**: 每次状态转换都应详细记录日志，包括：旧状态、新状态、转换时间、触发者、相关数据等，以便审计和问题追踪。

## 5. 错误处理与回滚

- **失败处理**: 当状态转换失败时，应提供清晰的错误信息，并确保系统能够优雅地处理失败情况。
- **回滚机制**: 对于复杂的状态转换，考虑实现回滚机制，以便在发生错误时恢复到之前的状态。

## 6. 业务逻辑分离

- 将状态转换的业务逻辑与数据持久化逻辑分离，提高代码的可维护性和可测试性。
- 可以使用状态机库来管理复杂的状态转换逻辑。
