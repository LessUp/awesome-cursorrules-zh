使用 Conventional Commit Messages 规范生成提交消息

提交消息应按以下结构组织：


```
<type>[可选范围]: <描述>

[可选正文]

[可选页脚]
``` 
--------------------------------

提交包含以下结构元素，用于向库的消费者传达意图：

  - `fix`: `fix` 类型的提交修补了代码库中的错误（这与语义化版本控制中的 `PATCH` 相关）。
  - `feat`: `feat` 类型的提交向代码库引入了新功能（这与语义化版本控制中的 `MINOR` 相关）。
  - `BREAKING CHANGE`: 包含页脚 `BREAKING CHANGE:` 或在类型/范围后附加 `!` 的提交，引入了破坏性 API 更改（与语义化版本控制中的 `MAJOR` 相关）。`BREAKING CHANGE` 可以是任何类型提交的一部分。
  - 允许使用 `fix:` 和 `feat:` 之外的其他类型，例如 `@commitlint/config-conventional`（基于 Angular 约定）推荐 `build:`、`chore:`、`ci:`、`docs:`、`style:`、`refactor:`、`perf:`、`test:` 等。
  - 除了 `BREAKING CHANGE: <description>` 之外的页脚可以提供，并遵循类似于 git trailer 格式的约定。
  - Conventional Commits 规范不强制要求其他类型，并且它们在语义化版本控制中没有隐式影响（除非它们包含 `BREAKING CHANGE`）。可以为提交类型提供一个范围，以提供额外的上下文信息，并包含在括号中，例如 `feat(parser): add ability to parse arrays`。



### 规范详情

本文档中的关键词“MUST”（必须）、“MUST NOT”（不得）、“REQUIRED”（必需）、“SHALL”（应）、“SHALL NOT”（不应）、“SHOULD”（应该）、“SHOULD NOT”（不应该）、“RECOMMENDED”（推荐）、“MAY”（可以）和“OPTIONAL”（可选）应按 RFC 2119 中的描述进行解释。

提交必须以类型为前缀，类型由名词（如 `feat`、`fix` 等）组成，后跟可选范围、可选 `!`，以及必需的末尾冒号和空格。
当提交添加新功能时，必须使用 `feat` 类型。
紧跟在类型/范围前缀后的冒号和空格之后。描述是对代码更改的简短总结，例如 `fix: array parsing issue when multiple spaces were contained in string`。

可以在简短描述之后提供更长的提交正文，提供有关代码更改的额外上下文信息。正文必须在描述之后空一行开始。

提交正文是自由格式的，可以由任意数量的以换行符分隔的段落组成。

可以在正文之后空一行提供一个或多个页脚。每个页脚必须由一个单词标记组成，后跟 `: ` 或 ` #` 分隔符，再后跟一个字符串值（这受到 git trailer 约定的启发）。

页脚的标记必须使用 `-` 代替空白字符，例如 `Acked-by`（这有助于区分页脚部分和多段正文）。`BREAKING CHANGE` 是一个例外，它也可以用作标记。

页脚的值可以包含空格和换行符，并且解析必须在观察到下一个有效的页脚标记/分隔符对时终止。

破坏性更改必须在提交的类型/范围前缀中指示，或作为页脚中的条目。

如果作为页脚包含，破坏性更改必须由大写文本 `BREAKING CHANGE` 组成，后跟冒号、空格和描述，例如 `BREAKING CHANGE: environment variables now take precedence over config files`。

如果包含在类型/范围前缀中，破坏性更改必须在 `:` 之前立即用 `!` 指示。如果使用 `!`，则可以省略页脚部分的 `BREAKING CHANGE:`，并且提交描述应用于描述破坏性更改。

除了 `feat` 和 `fix` 之外的类型也可以用于您的提交消息中，例如 `docs: update ref docs`。

组成 Conventional Commits 的信息单元不得被实现者视为大小写敏感，但 `BREAKING CHANGE` 必须大写。

当在页脚中用作标记时，`BREAKING-CHANGE` 必须与 `BREAKING CHANGE` 同义。
