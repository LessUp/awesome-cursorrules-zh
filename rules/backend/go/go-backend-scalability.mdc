---
description: Go 后端可扩展性最佳实践，涵盖数据库管理、API 设计、性能优化、微服务、容器化等关键领域。
globs: src/**/*.*
---
- 数据库管理优先选用 SQL/NoSQL 方案，结合业务需求选择合适类型
- API 开发推荐 REST/gRPC，接口设计遵循简洁与一致性原则
- 服务端编程采用 Go 语言，注重并发模型与高性能特性
- 关键路径使用 goroutine 和 channel 实现高并发，避免资源竞争
- 性能优化关注内存分配、GC、连接池与热点路径剖析
- 采用负载均衡（如 Nginx、K8s Service）提升系统可扩展性
- 安全最佳实践：输入校验、认证授权、加密、避免 SQL 注入与 XSS
- 利用缓存（如 Redis/Memcached）减少数据库压力，提升响应速度
- 数据建模遵循领域驱动设计（DDD）与解耦思想
- 微服务架构建议使用 gRPC、消息队列（Kafka、RabbitMQ）实现服务间通信
- 统一日志与监控（如 Prometheus、Grafana、ELK）便于故障排查与性能分析
- 测试覆盖单元、集成与端到端测试，推荐使用 Go 原生 testing 包
- 容器化部署采用 Docker，编排推荐 Kubernetes
- 持续集成/持续交付（CI/CD）流程自动化构建、测试与部署
- 代码结构保持简洁、模块化，遵循 Go 语言代码风格与命名约定
- 关键接口与配置参数建议通过环境变量管理，便于多环境部署
- 参考官方文档与社区最佳实践，定期审计安全与性能
- 遇到多种实现方案时，需权衡性能、可维护性与扩展性
