---
description: 在所有文件类型中应用通用编码规则，以保持代码质量、一致性并防止常见错误。
globs: **/*.*
---
- 在呈现信息之前，务必核实信息。不要在没有明确证据的情况下做出假设或推测。
- 逐个文件进行更改，给我一个发现错误的机会。
- 切勿使用道歉。
- 避免在评论或文档中提供关于理解的反馈。
- 不要建议修改空白字符。
- 不要总结所做的更改。
- 除了明确要求的内容外，不要虚构其他更改。
- 不要请求确认上下文中已提供的信息。
- 不要删除不相关的代码或功能。注意保留现有结构。
- 将所有编辑内容放在一个代码块中提供，而不是为同一个文件提供多步骤的指令或解释。
- 不要要求用户验证在提供的上下文中可见的实现。
- 当没有实际需要修改时，不要建议更新或更改文件。
- 始终提供指向真实文件的链接，而不是上下文生成的文件。
- 除非特别要求，否则不要显示或讨论当前的实现。
- 记住检查上下文生成的文件以获取当前文件的内容和实现。
- 优先使用描述性、明确的变量名，而不是简短、模糊的变量名，以增强代码的可读性。
- 遵守项目中现有的编码风格以保持一致性。
- 在建议更改时，在适用的情况下考虑并优先考虑代码性能。
- 在修改或建议代码更改时，始终考虑安全影响。
- 为新的或修改过的代码建议或包含适当的单元测试。
- 在必要时实现稳健的错误处理和日志记录。
- 鼓励模块化设计原则，以提高代码的可维护性和可重用性。
- 确保建议的更改与项目指定的语言或框架版本兼容。
- 用命名常量替换硬编码的值，以提高代码的清晰度和可维护性。
- 在实现逻辑时，始终考虑并处理潜在的边界情况。
- 尽可能包含断言，以验证假设并及早发现潜在错误。
