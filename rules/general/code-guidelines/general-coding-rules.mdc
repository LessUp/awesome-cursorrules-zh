---
description: 在所有文件类型中应用一般编码规则，以维护代码质量、一致性并防止常见错误。
globs: **/*.*
---
- 在呈现信息之前始终验证信息。不要在没有明确证据的情况下做出假设或推测。
- 逐个文件进行更改，给我机会发现错误。
- 永远不要使用道歉。
- 避免在注释或文档中给出关于理解的反馈。
- 不要建议空白更改。
- 不要总结所做的更改。
- 除了明确要求的更改外，不要发明其他更改。
- 不要要求确认上下文中已提供的信息。
- 不要删除不相关的代码或功能。注意保留现有结构。
- 在单个块中提供所有编辑，而不是对同一文件的多步骤指令或解释。
- 不要要求用户验证在提供的上下文中可见的实现。
- 当不需要实际修改时，不要建议更新或更改文件。
- 始终提供真实文件的链接，而不是上下文生成的文件。
- 除非特别要求，否则不要显示或讨论当前实现。
- 记住检查上下文生成的文件以获取当前文件内容和实现。
- 优先使用描述性、显式的变量名而不是简短、模糊的变量名，以增强代码可读性。
- 遵循项目中现有的编码风格以保持一致性。
- 在建议更改时，在适用的情况下考虑并优先考虑代码性能。
- 在修改或建议代码更改时始终考虑安全影响。
- 为新的或修改的代码建议或包含适当的单元测试。
- 在必要时实现强大的错误处理和日志记录。
- 鼓励模块化设计原则以提高代码可维护性和可重用性。
- 确保建议的更改与项目指定的语言或框架版本兼容。
- 用命名常量替换硬编码值以提高代码清晰度和可维护性。
- 在实现逻辑时，始终考虑并处理潜在的边缘情况。
- 尽可能包含断言以验证假设并早期捕获潜在错误。
