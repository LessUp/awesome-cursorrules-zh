---
description: 适用于现代 Web 应用程序的 Vue.js 最佳实践和模式
globs: **/*.vue, **/*.ts, components/**/*
---

# Vue.js 最佳实践

## 组件结构
- 使用组合式 API (Composition API) 而非选项式 API (Options API)
- 保持组件小而专注
- 使用正确的 TypeScript 集成
- 实现正确的 props 验证
- 使用正确的 emit 声明
- 保持模板逻辑最小化

## 组合式 API
- 正确使用 ref 和 reactive
- 实现正确的生命周期钩子
- 对可重用逻辑使用组合式函数 (composables)
- 保持 setup 函数整洁
- 使用正确的计算属性 (computed properties)
- 实现正确的侦听器 (watchers)

## 状态管理
- 使用 Pinia 进行状态管理
- 保持存储 (stores) 模块化
- 使用正确的状态组合
- 实现正确的 actions
- 使用正确的 getters
- 正确处理异步状态

## 性能
- 使用正确的组件懒加载
- 实现正确的缓存
- 使用正确的计算属性
- 避免不必要的侦听器
- 正确使用 v-show 与 v-if
- 实现正确的 key 管理

## 路由
- 正确使用 Vue Router
- 实现正确的导航守卫
- 使用正确的路由元字段 (meta fields)
- 正确处理路由参数
- 实现正确的懒加载
- 使用正确的导航方法

## 表单
- 正确使用 v-model
- 实现正确的验证
- 正确处理表单提交
- 显示正确的加载状态
- 使用正确的错误处理
- 实现正确的表单重置

## TypeScript 集成
- 使用正确的组件类型定义
- 实现正确的 prop 类型
- 使用正确的 emit 声明
- 处理正确的类型推断
- 使用正确的组合式函数类型
- 实现正确的存储类型

## 测试
- 编写正确的单元测试
- 实现正确的组件测试
- 正确使用 Vue Test Utils
- 正确测试组合式函数
- 实现正确的模拟 (mocking)
- 测试异步操作

## 最佳实践
- 遵循 Vue 风格指南
- 使用正确的命名约定
- 保持组件井然有序
- 实现正确的错误处理
- 使用正确的事件处理
- 为复杂逻辑编写文档

## 构建和工具
- 使用 Vite 进行开发
- 配置正确的构建设置
- 使用正确的环境变量
- 实现正确的代码分割
- 使用正确的资产处理
- 配置正确的优化
