---
description: Svelte 现代 Web 应用的最佳实践和模式
globs: **/*.svelte, src/**/*.ts, src/**/*.js
---

# Svelte 最佳实践

## 组件结构
- 保持组件小而专注
- 使用正确的 TypeScript 集成
- 实现正确的 props 类型定义
- 使用正确的事件派发
- 保持标记干净易读
- 使用正确的插槽 (slot) 实现

## 响应性 (Reactivity)
- 使用正确的响应式声明
- 实现正确的存储 (stores)
- 使用正确的响应式语句
- 正确处理派生值
- 使用正确的生命周期函数
- 实现正确的绑定

## 状态管理
- 使用正确的 Svelte 存储 (stores)
- 保持存储模块化
- 使用正确的派生存储 (derived stores)
- 实现正确的动作 (actions)
- 正确处理异步状态
- 使用正确的存储订阅

## 性能
- 使用正确的组件懒加载
- 实现正确的过渡 (transitions)
- 使用正确的动画 (animations)
- 避免不必要的响应性
- 使用正确的事件转发
- 实现正确的 key 块

## 路由
- 使用 SvelteKit 进行路由
- 实现正确的布局
- 使用正确的路由参数
- 正确处理加载状态
- 实现正确的错误页面
- 使用正确的导航方法

## 表单
- 使用正确的表单绑定
- 实现正确的验证
- 正确处理表单提交
- 显示正确的加载状态
- 使用正确的错误处理
- 实现正确的表单重置

## TypeScript 集成
- 使用正确的组件类型
- 实现正确的 prop 类型
- 使用正确的事件类型
- 处理正确的类型推断
- 使用正确的存储类型
- 实现正确的动作类型

## 测试
- 编写正确的单元测试
- 实现正确的组件测试
- 使用正确的测试库
- 正确测试存储
- 实现正确的模拟 (mocking)
- 测试异步操作

## 最佳实践
- 遵循 Svelte 风格指南
- 使用正确的命名约定
- 保持组件井然有序
- 实现正确的错误处理
- 使用正确的事件处理
- 为复杂逻辑编写文档

## 构建和工具
- 使用 Vite 进行开发
- 配置正确的构建设置
- 使用正确的环境变量
- 实现正确的代码分割
- 使用正确的资产处理
- 配置正确的优化
